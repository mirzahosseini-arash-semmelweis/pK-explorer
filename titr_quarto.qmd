---
title: "pK explorer"
format:
  dashboard:
    theme: cosmo
server: shiny
---

```{r, echo = FALSE, results = FALSE, warning = FALSE, comment = FALSE, warning = FALSE}
#| context: setup
library(shiny)
library(shinysurveys)
library(shinyjs)
library(ggplot2)
library(plotly)
library(ggtext)
library(tidyverse)
```

# {.sidebar}

```{r}
selectInput("n", "Number of acid/base sites", c(1:10))
sliderInput("z",
            "Charge of completely protonated species:",
            min = 0,
            max = 10,
            step = 1,
            value = 0,
            ticks = FALSE)
```

H~`r htmlOutput("Hn", inline = TRUE)`~A^`r htmlOutput("Az", inline = TRUE)`^

```{r}
numberInput("c_T", "Concentration of analyte (mol/L):",
             value = 0.1, min = 0, max = 1, step = 0.1)
selectInput("dilution", "Ignore dilution during titration?",
            choices = c("Do not ignore", "Ignore", "Overlay both"),
            selected = "Do not ignore")
tags$div(id = "blah_container")
uiOutput("pKa")
```

# Titration

## Column {.tabset}

```{r tab1}
#| title: Graphs
plotlyOutput("titrPlot")
plotlyOutput("bufferPlot")
plotlyOutput("speciesPlot")
plotlyOutput("chargePlot")
```

```{r}
#| context: server
n <- reactive({input$n})

observe({
  updateSliderInput(
    session, 
    "z", 
    max = n(),
  )
})

UI_exists = FALSE

observeEvent(input[["dilution"]], {
  if(!UI_exists && input$dilution != "Ignore") {
    insertUI(selector = "#blah_container",
             where = "afterEnd",
             ui = numberInput("c_B", "Concentration of titrant NaOH (mol/L):",
                              value = 1, min = 0, max = 1, step = 0.1))
    UI_exists <<- TRUE
  }
})

observeEvent({input$dilution}, {
  if(input$dilution == "Ignore") {
    removeUI(selector = "div:has(> #c_B)")
    UI_exists <<- FALSE
  }
})

output$Hn <- renderText({
  if(input$n == 1) {NULL} else {input$n}
})

output$Az <- renderText({
  if(input$z == 0) {NULL} else {
    if(input$z == 1) {"+"} else {paste(input$z, "+")}
  }
})

output$pKa <- renderUI({
  n <- input$n
  lapply(1:n, function(i) {
    numericInput(inputId = paste0("pKa", i),
                 label = paste("pKa", i),
                 value = i,
                 min = 0)
  })
})

output$titrPlot <- renderPlotly({
  nsim <- 1.4e3
  n <- as.integer(input$n)
  c_T <- input$c_T
  c_B <- input$c_B
  pKa <- c(input$pKa1, input$pKa2, input$pKa3, input$pKa4, input$pKa5,
           input$pKa6, input$pKa7, input$pKa8, input$pKa9, input$pKa10)
  pKa <- na.omit(pKa)
  pH <- seq(0, 14, length = nsim)
  w <- 1e-14/(10^-pH) - (10^-pH)
  x <- matrix(data = NA, nrow = nsim, ncol = n)
  for(i in 1:n) {
    x[, i] <- 10^(-pH*i + sum(pKa[n:(n - i + 1)]))
  }
  a_H <- rowSums(x) + 1
  Y <- (x %*% c((n - 1):0))/a_H + n/a_H
  c_NaOH <- c_T*Y + w
  V <- as.vector(1e3*(c_T*Y + w)/(c_B - w))
  xmin <- V[1]
  whichmax <- which(V == max(V))
  for(i in whichmax:nsim) {
    V[i] <- NA
  }
  c_NaOH_ <- c_B*V/(1000 + V)
  data <- data.frame(c_NaOH = c_NaOH, c_NaOH_ = c_NaOH_, V = V, pH = pH)
  data.long <- data %>% select(c("c_NaOH", "c_NaOH_", "pH")) %>%
    rename("ignoring dilution" = c_NaOH, "not ignoring dilution" = c_NaOH_) %>%
    pivot_longer(-pH, names_to = "titration", values_to = "c")
  titrPlot_c <- ggplot(data, aes(x = c_NaOH, y = pH)) +
    geom_line(col = "#800026", linewidth = 0.75) +
    theme_classic() +
    labs(x = "<i>c</i><sub>NaOH</sub> (mol/L)",
         title = "Titration begins from solution of the completely protonated ligand, negative amount of NaOH corresponds to added HCl") +
    theme(axis.title.x = element_markdown(),
          plot.title = element_text(hjust = 0, size = 8, face = "italic")) +
    scale_y_continuous(breaks = seq(0, 14, 2)) +
    scale_x_continuous(n.breaks = 10) +
    geom_segment(aes(x = n*c_T, xend = n*c_T,
                     y = 0, yend = mean(data$pH[which(abs(data$c_NaOH - n*c_T) < 1e-2)])),
                 color = "grey", linetype = "dashed", linewidth = 0.25) +
    annotate(geom = "text", x = n*c_T, y = 0, label = "equivalence point",
             color = "darkgrey", size = 3, fontface = "serif")
  titrPlot_V <- ggplot(data, aes(x = V, y = pH)) +
    geom_line(col = "#800026", linewidth = 0.75) +
    theme_classic() +
    labs(x = "<i>V</i><sub>NaOH</sub> (mL)",
         title = "Titration begins from 1 L solution of the completely protonated ligand, negative amount of NaOH corresponds to added HCl") +
    theme(axis.title.x = element_markdown(),
          plot.title = element_text(hjust = 0, size = 8, face = "italic")) +
    scale_y_continuous(breaks = seq(0, 14, 2)) +
    scale_x_continuous(limits = c(xmin, 5e3), breaks = seq(5e3, xmin, -500)) +
    geom_segment(aes(x = 1e3*n*c_T/c_B, xend = 1e3*n*c_T/c_B,
                     y = 0, yend = mean(data$pH[which(abs(data$V - 1e3*n*c_T/c_B) < 1e-2)])),
                 color = "grey", linetype = "dashed", linewidth = 0.25) +
    annotate(geom = "text", x = 1e3*n*c_T/c_B, y = 0,
             label = "equivalence point", color = "darkgrey", size = 3, fontface = "serif")
  titrPlot_both <- ggplot(data.long, aes(x = c, y = pH, color = titration)) +
    geom_line(linewidth = 0.75) +
    theme_classic() +
    labs(x = "<i>c</i><sub>NaOH</sub> (mol/L)",
         title = "Titration begins from 1 L solution of the completely protonated ligand, negative amount of NaOH corresponds to added HCl") +
    theme(axis.title.x = element_markdown(),
          plot.title = element_text(hjust = 0, size = 8, face = "italic"),
          legend.position = c(0.75, 0.25)) +
    scale_y_continuous(breaks = seq(0, 14, 2)) +
    scale_x_continuous(n.breaks = 10) +
    scale_color_brewer(palette = "Set1")
  switch(as.character(input$dilution),
         "Ignore" = ggplotly(titrPlot_c),
         "Do not ignore" = ggplotly(titrPlot_V),
         "Overlay both" = ggplotly(titrPlot_both))
})

output$bufferPlot <- renderPlotly({
  nsim <- 1.4e3
  n <- as.integer(input$n)
  c_T <- input$c_T
  c_B <- input$c_B
  pKa <- c(input$pKa1, input$pKa2, input$pKa3, input$pKa4, input$pKa5,
           input$pKa6, input$pKa7, input$pKa8, input$pKa9, input$pKa10)
  pKa <- na.omit(pKa)
  pH <- seq(0, 14, length = nsim)
  w <- 1e-14/(10^-pH) - (10^-pH)
  x <- matrix(data = NA, nrow = nsim, ncol = n)
  for(i in 1:n) {
    x[, i] <- 10^(-pH*i + sum(pKa[n:(n - i + 1)]))
  }
  a_H <- rowSums(x) + 1
  Y <- (x %*% c((n - 1):0))/a_H + n/a_H
  c_NaOH <- c_T*Y + w
  dpH <- pH[2] - pH[1]
  B_c <- vector(length = nsim)
  B_c[1] <- 0
  for(i in 2:nsim) {
    B_c[i] <- (c_NaOH[i] - c_NaOH[i - 1])/dpH
  }
  B_c[1] <- B_c[2]
  V <- as.vector(1e3*(c_T*Y + w)/(c_B - w))
  xmin <- V[1]
  whichmax <- which(V == max(V))
  for(i in whichmax:nsim) {
    V[i] <- NA
  }
  c_NaOH_ <- c_B*V/(1000 + V)
  B_V <- vector(length = nsim)
  B_V[1] <- 0
  for(i in 2:nsim) {
    B_V[i] <- (c_NaOH_[i] - c_NaOH_[i - 1])/dpH
  }
  B_V[1] <- B_V[2]
  data <- data.frame(B_c = B_c, B_V = B_V, pH = pH)
  data.long <- data %>% select(c("B_c", "B_V", "pH")) %>%
    rename("ignoring dilution" = B_c, "not ignoring dilution" = B_V) %>%
    pivot_longer(-pH, names_to = "titration", values_to = "B")
  bufferPlot_c <- ggplot(data, aes(x = pH, y = B_c)) +
    geom_line(col = "navyblue", linewidth = 0.75) +
    theme_classic() +
    labs(x = "pH",
         y = "Buffer intensity (mol/L)") +
    scale_x_continuous(breaks = seq(0, 14, 2)) +
    scale_y_continuous(limits = c(0, 0.75), n.breaks = 5) +
    theme(axis.title.y = element_text(size = 7))
  bufferPlot_V <- ggplot(data, aes(x = pH, y = B_V)) +
    geom_line(col = "navyblue", linewidth = 0.75) +
    theme_classic() +
    labs(x = "pH",
         y = "Buffer intensity (mol/L)") +
    scale_x_continuous(breaks = seq(0, 14, 2)) +
    scale_y_continuous(limits = c(0, 0.75), n.breaks = 5) +
    theme(axis.title.y = element_text(size = 7))
  bufferPlot_both <- ggplot(data.long, aes(x = pH, y = B, color = titration)) +
    geom_line(linewidth = 0.75) +
    theme_classic() +
    labs(x = "pH",
         y = "Buffer intensity (mol/L)") +
    theme(legend.position = c(0.75, 0.25),
          axis.title.y = element_text(size = 7)) +
    scale_x_continuous(breaks = seq(0, 14, 2)) +
    scale_y_continuous(limits = c(0, 0.75), n.breaks = 5) +
    scale_color_brewer(palette = "Blues")
  switch(as.character(input$dilution),
         "Ignore" = ggplotly(bufferPlot_c),
         "Do not ignore" = ggplotly(bufferPlot_V),
         "Overlay both" = ggplotly(bufferPlot_both))
})

output$speciesPlot <- renderPlotly({
  nsim <- 1.4e3
  n <- as.integer(input$n)
  pKa <- c(input$pKa1, input$pKa2, input$pKa3, input$pKa4, input$pKa5,
           input$pKa6, input$pKa7, input$pKa8, input$pKa9, input$pKa10)
  pKa <- na.omit(pKa)
  pH <- seq(0, 14, length = nsim)
  x <- matrix(data = NA, nrow = nsim, ncol = n)
  for(i in 1:n) {
    x[, i] <- 10^(-pH*i + sum(pKa[n:(n - i + 1)]))
  }
  a_H <- rowSums(x) + 1
  x <- cbind(1, x)/a_H
  df <- data.frame(x)
  df <- cbind(df, pH)
  vars <- vector()
  for(i in 1:(n + 1)) {vars[i] <- paste0("H", i - 1)}
  colnames(df)[1:(n + 1)] <- vars
  df.long <- df %>% select(c(vars, "pH")) %>%
    pivot_longer(-pH, names_to = "species", values_to = "value")
  speciesPlot <- ggplot(df.long, aes(x = pH, y = value, color = species)) +
    geom_line() +
    theme_classic() +
    labs(x = "pH",
         y = "Relative abundance") +
    scale_x_continuous(breaks = seq(0, 14, 2)) +
    scale_y_continuous(n.breaks = 5) +
    theme(axis.title.y = element_text(size = 8))
  ggplotly(speciesPlot)
})

output$chargePlot <- renderPlotly({
  nsim <- 1.4e3
  n <- as.integer(input$n)
  z <- as.integer(input$z)
  pKa <- c(input$pKa1, input$pKa2, input$pKa3, input$pKa4, input$pKa5,
           input$pKa6, input$pKa7, input$pKa8, input$pKa9, input$pKa10)
  pKa <- na.omit(pKa)
  pH <- seq(0, 14, length = nsim)
  x <- matrix(data = NA, nrow = nsim, ncol = n)
  for(i in 1:n) {
    x[, i] <- 10^(-pH*i + sum(pKa[n:(n - i + 1)]))
  }
  a_H <- rowSums(x) + 1
  x <- cbind(1, x)/a_H
  q <- x %*% c((z - n):(z))
  q <- data.frame(q)
  q <- cbind(q, pH)
  ymin <- min(q$q)
  ymax <- max(q$q)
  chargePlot <- ggplot(q, aes(x = pH, y = q)) +
    geom_rect(aes(xmin = 0, xmax = 14, ymin = 0, ymax = ymax),
              fill = "pink", show.legend = FALSE) +
    geom_rect(aes(xmin = 0, xmax = 14, ymin = ymin, ymax = 0),
              fill = "lightblue", show.legend = FALSE) +
    geom_line() +
    labs(x = "pH",
         y = "Average charge") +
    scale_x_continuous(breaks = seq(0, 14, 2)) +
    scale_y_continuous(n.breaks = 5)
  ggplotly(chargePlot)
})
```

### Equations
The core equations for calculating protonation species concentrations in the aqueous solution are the following:

{1} $[\textrm{H}^+] \cdot [\textrm{OH}^-] = K_w$

- autoprotolysis of water; water ion product value assumed to be $10^{-14}$

{2} $\frac{[\textrm{H}_{n-i}\textrm{A}^{z-i}] \cdot [\textrm{H}^+]}{[\textrm{H}_{n-i+1}\textrm{A}^{z-i+1}]} = K_{a,i}$

- equilibrium constant of *i*th proton dissociation step (acid dissociation constant) of completely protonated species $\textrm{H}_{n}\textrm{A}^{z+}, z \in (0, ..., n)$

{3} $\chi_i = \frac{\frac{[\textrm{H}^+]^i}{K_{a,n} \cdot ... \cdot K_{a,n-i+1}}}{\alpha_{\textrm{H}}}, \alpha_{\textrm{H}} = 1+\frac{[\textrm{H}^+]}{K_{a,n}}+\frac{[\textrm{H}^+]^2}{K_{a,n} \cdot K_{a,n-1}}+...+\frac{[\textrm{H}^+]^n}{K_{a,n} \cdot ... \cdot K_{a,1}}$

- ionization fractions (i.e. relative abundance) of protonation species; $\chi_i$ expressions are combination of acid dissociation constants and mass balance ($c_T = [\textrm{H}_{n}\textrm{A}^{z+}]+[\textrm{H}_{n-1}\textrm{A}^{(z-1)+}]+...+[\textrm{A}^{(z-n)+}]$, where $c_T$ is the total concentration of the analyte (*titrand*))

- $\chi_0$ is equal to $\frac{1}{\alpha_{\textrm{H}}}$ by definition

{4} $[\textrm{Na}^+] + [\textrm{H}^+] = (-z) \cdot [\textrm{H}_{n}\textrm{A}^{z+}] + (1-z) \cdot [\textrm{H}_{n-1}\textrm{A}^{(z-1)+}] + ... + (n-z) \cdot [\textrm{A}^{(z-n)+}] + [\textrm{OH}^-] + z \cdot [\textrm{X}^-]$

- ion charge balance, i.e. the positive charges must equal the negative charges in the solution

- $\textrm{Na}^+$ ions come from added $\textrm{NaOH}$ (*titrant*), therefore it is equal to $c_B$ (total base concentration)

- the charge of the protonation species depends on the values of $n$ and $z$; since the titration always begins from the solution of the completely protonated species a counterion is required for $z>0$, i.e. $\textrm{H}_{n}\textrm{A}^{z+}n\textrm{X}^-$, and $[\textrm{X}^-]$ is equal to $n \cdot c_T$

The combination of the equations above gives rise to the unified equation for simulating titration curves:

{5} $c_B = c_T \cdot (0 \cdot \chi_n + 1 \cdot \chi_{n-1} + ... + n \cdot \chi_{0}) + \frac{K_w}{[\textrm{H}^+]} - [\textrm{H}^+]$

Note that the $[\textrm{X}^-]$ term cancels out.

If dilution during the titration is considered, equation {5} is modified as such (assuming $V$ mL of titrant is added to $1$ L of titrand):

{6} $c_B \cdot \frac{V}{10^3+V} = c_T \cdot \frac{10^3}{10^3+V} \cdot (0 \cdot \chi_n + 1 \cdot \chi_{n-1} + ... + n \cdot \chi_{0}) + \frac{K_w}{[\textrm{H}^+]} - [\textrm{H}^+]$

from which $V$ can be expressed and actual $c_B' = c_B \cdot \frac{V}{10^3+V}$ calculated.

Finally, the average charge is calculated by the charge weighed average of the ionization fractions.

# About

## Row {.flow}

::: card
::: card-header
About **pK explorer**
:::
::: card-body
This dashboard is a demo of Quarto dashboards and is intended to demonstrate basic acid-base chemistry and related concepts. Although the simulations are carefully designed, this demo may contain mistakes and **does not** come with any warranty, whatsoever.

[Aqion](https://www.aqion.de/) is an online service and software package that allows the comprehensive simulation and calculation of pH and hydrochemistry related quantities. Some of the equations in this demo can be found with detailed explanations in the following [publication](https://www.aqion.de/file/acid-base-systems.pdf).
The data used in this dashboard is simulated and manipulated using the [R statistical language](https://www.R-project.org/) in the [R Studio IDE](https://posit.co/download/rstudio-desktop/).

> This dataset and demo is an educational tool for general and physical chemistry. Although a rigorous discussion of the equations is attempted, certain underlying assumptions and simplifications always remain inherent to the framework. Any suggestions or requests are welcome at this [contact](mailto:mirzahosseini.arash@semmelweis.hu).
>
> **Disclaimer** - pK explorer © 2024 by Arash Mirzahosseini is licensed under [CC BY-NC-SA 4.0](https://creativecommons.org/share-your-work/cclicenses/)
> This license enables reusers to distribute, remix, adapt, and build upon the material in any medium or format for noncommercial purposes only, and only so long as attribution is given to the creator. If you remix, adapt, or build upon the material, you must license the modified material under identical terms.
:::
:::

::: card
::: card-header
About this dashboard
:::
::: card-body
This dashboard is built with [Quarto Dashboards](https://quarto.org/docs/dashboards/).
The dashboard is updated regularly and published on [Quarto Pubs](https://quartopub.com/).

[<i class="bi bi-github"></i> Source code](https://github.com/mirzahosseini-arash-semmelweis/pK-explorer.git)
:::
:::